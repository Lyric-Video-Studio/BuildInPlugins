//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace A1111TxtToImgPlugin
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            [System.Diagnostics.CodeAnalysis.MemberNotNull(nameof(_baseUrl))]
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Text2Imgapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TextToImageResponse> Text2imgapi_sdapi_v1_txt2img_postAsync(StableDiffusionProcessingTxt2Img body)
        {
            return Text2imgapi_sdapi_v1_txt2img_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Text2Imgapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TextToImageResponse> Text2imgapi_sdapi_v1_txt2img_postAsync(StableDiffusionProcessingTxt2Img body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/txt2img"
                    urlBuilder_.Append("sdapi/v1/txt2img");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TextToImageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Img2Imgapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ImageToImageResponse> Img2imgapi_sdapi_v1_img2img_postAsync(StableDiffusionProcessingImg2Img body)
        {
            return Img2imgapi_sdapi_v1_img2img_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Img2Imgapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ImageToImageResponse> Img2imgapi_sdapi_v1_img2img_postAsync(StableDiffusionProcessingImg2Img body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/img2img"
                    urlBuilder_.Append("sdapi/v1/img2img");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ImageToImageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Extras Single Image Api
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ExtrasSingleImageResponse> Extras_single_image_api_sdapi_v1_extra_single_image_postAsync(ExtrasSingleImageRequest body)
        {
            return Extras_single_image_api_sdapi_v1_extra_single_image_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Extras Single Image Api
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExtrasSingleImageResponse> Extras_single_image_api_sdapi_v1_extra_single_image_postAsync(ExtrasSingleImageRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/extra-single-image"
                    urlBuilder_.Append("sdapi/v1/extra-single-image");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExtrasSingleImageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Extras Batch Images Api
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ExtrasBatchImagesResponse> Extras_batch_images_api_sdapi_v1_extra_batch_images_postAsync(ExtrasBatchImagesRequest body)
        {
            return Extras_batch_images_api_sdapi_v1_extra_batch_images_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Extras Batch Images Api
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExtrasBatchImagesResponse> Extras_batch_images_api_sdapi_v1_extra_batch_images_postAsync(ExtrasBatchImagesRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/extra-batch-images"
                    urlBuilder_.Append("sdapi/v1/extra-batch-images");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExtrasBatchImagesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Pnginfoapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PNGInfoResponse> Pnginfoapi_sdapi_v1_png_info_postAsync(PNGInfoRequest body)
        {
            return Pnginfoapi_sdapi_v1_png_info_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Pnginfoapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PNGInfoResponse> Pnginfoapi_sdapi_v1_png_info_postAsync(PNGInfoRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/png-info"
                    urlBuilder_.Append("sdapi/v1/png-info");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PNGInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Progressapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProgressResponse> Progressapi_sdapi_v1_progress_getAsync(bool? skip_current_image)
        {
            return Progressapi_sdapi_v1_progress_getAsync(skip_current_image, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Progressapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProgressResponse> Progressapi_sdapi_v1_progress_getAsync(bool? skip_current_image, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/progress"
                    urlBuilder_.Append("sdapi/v1/progress");
                    urlBuilder_.Append('?');
                    if (skip_current_image != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("skip_current_image")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip_current_image, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProgressResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Interrogateapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Interrogateapi_sdapi_v1_interrogate_postAsync(InterrogateRequest body)
        {
            return Interrogateapi_sdapi_v1_interrogate_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Interrogateapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Interrogateapi_sdapi_v1_interrogate_postAsync(InterrogateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/interrogate"
                    urlBuilder_.Append("sdapi/v1/interrogate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Interruptapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Interruptapi_sdapi_v1_interrupt_postAsync()
        {
            return Interruptapi_sdapi_v1_interrupt_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Interruptapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Interruptapi_sdapi_v1_interrupt_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/interrupt"
                    urlBuilder_.Append("sdapi/v1/interrupt");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Skip
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Skip_sdapi_v1_skip_postAsync()
        {
            return Skip_sdapi_v1_skip_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Skip
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Skip_sdapi_v1_skip_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/skip"
                    urlBuilder_.Append("sdapi/v1/skip");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Config
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Options> Get_config_sdapi_v1_options_getAsync()
        {
            return Get_config_sdapi_v1_options_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Config
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Options> Get_config_sdapi_v1_options_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/options"
                    urlBuilder_.Append("sdapi/v1/options");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Options>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set Config
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Set_config_sdapi_v1_options_postAsync(object body)
        {
            return Set_config_sdapi_v1_options_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Config
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Set_config_sdapi_v1_options_postAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/options"
                    urlBuilder_.Append("sdapi/v1/options");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Cmd Flags
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Flags> Get_cmd_flags_sdapi_v1_cmd_flags_getAsync()
        {
            return Get_cmd_flags_sdapi_v1_cmd_flags_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Cmd Flags
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Flags> Get_cmd_flags_sdapi_v1_cmd_flags_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/cmd-flags"
                    urlBuilder_.Append("sdapi/v1/cmd-flags");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Flags>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Samplers
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SamplerItem>> Get_samplers_sdapi_v1_samplers_getAsync()
        {
            return Get_samplers_sdapi_v1_samplers_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Samplers
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SamplerItem>> Get_samplers_sdapi_v1_samplers_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/samplers"
                    urlBuilder_.Append("sdapi/v1/samplers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SamplerItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Upscalers
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpscalerItem>> Get_upscalers_sdapi_v1_upscalers_getAsync()
        {
            return Get_upscalers_sdapi_v1_upscalers_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Upscalers
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpscalerItem>> Get_upscalers_sdapi_v1_upscalers_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/upscalers"
                    urlBuilder_.Append("sdapi/v1/upscalers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UpscalerItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Latent Upscale Modes
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LatentUpscalerModeItem>> Get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_getAsync()
        {
            return Get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Latent Upscale Modes
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LatentUpscalerModeItem>> Get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/latent-upscale-modes"
                    urlBuilder_.Append("sdapi/v1/latent-upscale-modes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LatentUpscalerModeItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Sd Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SDModelItem>> Get_sd_models_sdapi_v1_sd_models_getAsync()
        {
            return Get_sd_models_sdapi_v1_sd_models_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Sd Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SDModelItem>> Get_sd_models_sdapi_v1_sd_models_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/sd-models"
                    urlBuilder_.Append("sdapi/v1/sd-models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SDModelItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Sd Vaes
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SDVaeItem>> Get_sd_vaes_sdapi_v1_sd_vae_getAsync()
        {
            return Get_sd_vaes_sdapi_v1_sd_vae_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Sd Vaes
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SDVaeItem>> Get_sd_vaes_sdapi_v1_sd_vae_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/sd-vae"
                    urlBuilder_.Append("sdapi/v1/sd-vae");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SDVaeItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Hypernetworks
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HypernetworkItem>> Get_hypernetworks_sdapi_v1_hypernetworks_getAsync()
        {
            return Get_hypernetworks_sdapi_v1_hypernetworks_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Hypernetworks
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HypernetworkItem>> Get_hypernetworks_sdapi_v1_hypernetworks_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/hypernetworks"
                    urlBuilder_.Append("sdapi/v1/hypernetworks");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HypernetworkItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Face Restorers
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FaceRestorerItem>> Get_face_restorers_sdapi_v1_face_restorers_getAsync()
        {
            return Get_face_restorers_sdapi_v1_face_restorers_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Face Restorers
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FaceRestorerItem>> Get_face_restorers_sdapi_v1_face_restorers_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/face-restorers"
                    urlBuilder_.Append("sdapi/v1/face-restorers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FaceRestorerItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Realesrgan Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RealesrganItem>> Get_realesrgan_models_sdapi_v1_realesrgan_models_getAsync()
        {
            return Get_realesrgan_models_sdapi_v1_realesrgan_models_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Realesrgan Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RealesrganItem>> Get_realesrgan_models_sdapi_v1_realesrgan_models_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/realesrgan-models"
                    urlBuilder_.Append("sdapi/v1/realesrgan-models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RealesrganItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Prompt Styles
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PromptStyleItem>> Get_prompt_styles_sdapi_v1_prompt_styles_getAsync()
        {
            return Get_prompt_styles_sdapi_v1_prompt_styles_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Prompt Styles
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PromptStyleItem>> Get_prompt_styles_sdapi_v1_prompt_styles_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/prompt-styles"
                    urlBuilder_.Append("sdapi/v1/prompt-styles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PromptStyleItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EmbeddingsResponse> Get_embeddings_sdapi_v1_embeddings_getAsync()
        {
            return Get_embeddings_sdapi_v1_embeddings_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmbeddingsResponse> Get_embeddings_sdapi_v1_embeddings_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/embeddings"
                    urlBuilder_.Append("sdapi/v1/embeddings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmbeddingsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Refresh Checkpoints
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Refresh_checkpoints_sdapi_v1_refresh_checkpoints_postAsync()
        {
            return Refresh_checkpoints_sdapi_v1_refresh_checkpoints_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refresh Checkpoints
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Refresh_checkpoints_sdapi_v1_refresh_checkpoints_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/refresh-checkpoints"
                    urlBuilder_.Append("sdapi/v1/refresh-checkpoints");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Refresh Vae
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Refresh_vae_sdapi_v1_refresh_vae_postAsync()
        {
            return Refresh_vae_sdapi_v1_refresh_vae_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refresh Vae
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Refresh_vae_sdapi_v1_refresh_vae_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/refresh-vae"
                    urlBuilder_.Append("sdapi/v1/refresh-vae");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Embedding
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateResponse> Create_embedding_sdapi_v1_create_embedding_postAsync(object body)
        {
            return Create_embedding_sdapi_v1_create_embedding_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Embedding
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateResponse> Create_embedding_sdapi_v1_create_embedding_postAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/create/embedding"
                    urlBuilder_.Append("sdapi/v1/create/embedding");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Hypernetwork
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateResponse> Create_hypernetwork_sdapi_v1_create_hypernetwork_postAsync(object body)
        {
            return Create_hypernetwork_sdapi_v1_create_hypernetwork_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Hypernetwork
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateResponse> Create_hypernetwork_sdapi_v1_create_hypernetwork_postAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/create/hypernetwork"
                    urlBuilder_.Append("sdapi/v1/create/hypernetwork");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Train Embedding
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrainResponse> Train_embedding_sdapi_v1_train_embedding_postAsync(object body)
        {
            return Train_embedding_sdapi_v1_train_embedding_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Train Embedding
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrainResponse> Train_embedding_sdapi_v1_train_embedding_postAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/train/embedding"
                    urlBuilder_.Append("sdapi/v1/train/embedding");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrainResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Train Hypernetwork
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrainResponse> Train_hypernetwork_sdapi_v1_train_hypernetwork_postAsync(object body)
        {
            return Train_hypernetwork_sdapi_v1_train_hypernetwork_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Train Hypernetwork
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrainResponse> Train_hypernetwork_sdapi_v1_train_hypernetwork_postAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/train/hypernetwork"
                    urlBuilder_.Append("sdapi/v1/train/hypernetwork");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrainResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Memory
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MemoryResponse> Get_memory_sdapi_v1_memory_getAsync()
        {
            return Get_memory_sdapi_v1_memory_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Memory
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MemoryResponse> Get_memory_sdapi_v1_memory_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/memory"
                    urlBuilder_.Append("sdapi/v1/memory");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MemoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unloadapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Unloadapi_sdapi_v1_unload_checkpoint_postAsync()
        {
            return Unloadapi_sdapi_v1_unload_checkpoint_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unloadapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Unloadapi_sdapi_v1_unload_checkpoint_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/unload-checkpoint"
                    urlBuilder_.Append("sdapi/v1/unload-checkpoint");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reloadapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Reloadapi_sdapi_v1_reload_checkpoint_postAsync()
        {
            return Reloadapi_sdapi_v1_reload_checkpoint_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reloadapi
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Reloadapi_sdapi_v1_reload_checkpoint_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/reload-checkpoint"
                    urlBuilder_.Append("sdapi/v1/reload-checkpoint");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Scripts List
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ScriptsList> Get_scripts_list_sdapi_v1_scripts_getAsync()
        {
            return Get_scripts_list_sdapi_v1_scripts_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Scripts List
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScriptsList> Get_scripts_list_sdapi_v1_scripts_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/scripts"
                    urlBuilder_.Append("sdapi/v1/scripts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScriptsList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Script Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScriptInfo>> Get_script_info_sdapi_v1_script_info_getAsync()
        {
            return Get_script_info_sdapi_v1_script_info_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Script Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScriptInfo>> Get_script_info_sdapi_v1_script_info_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/script-info"
                    urlBuilder_.Append("sdapi/v1/script-info");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ScriptInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Extensions List
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExtensionItem>> Get_extensions_list_sdapi_v1_extensions_getAsync()
        {
            return Get_extensions_list_sdapi_v1_extensions_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Extensions List
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExtensionItem>> Get_extensions_list_sdapi_v1_extensions_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/extensions"
                    urlBuilder_.Append("sdapi/v1/extensions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ExtensionItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Loras
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_loras_sdapi_v1_loras_getAsync()
        {
            return Get_loras_sdapi_v1_loras_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loras
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_loras_sdapi_v1_loras_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/loras"
                    urlBuilder_.Append("sdapi/v1/loras");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Refresh Loras
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Refresh_loras_sdapi_v1_refresh_loras_postAsync()
        {
            return Refresh_loras_sdapi_v1_refresh_loras_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refresh Loras
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Refresh_loras_sdapi_v1_refresh_loras_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sdapi/v1/refresh-loras"
                    urlBuilder_.Append("sdapi/v1/refresh-loras");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Version
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Version_controlnet_version_getAsync()
        {
            return Version_controlnet_version_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Version
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Version_controlnet_version_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "controlnet/version"
                    urlBuilder_.Append("controlnet/version");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Model List
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Model_list_controlnet_model_list_getAsync(bool? update)
        {
            return Model_list_controlnet_model_list_getAsync(update, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Model List
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Model_list_controlnet_model_list_getAsync(bool? update, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "controlnet/model_list"
                    urlBuilder_.Append("controlnet/model_list");
                    urlBuilder_.Append('?');
                    if (update != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("update")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(update, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Module List
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Module_list_controlnet_module_list_getAsync(bool? alias_names)
        {
            return Module_list_controlnet_module_list_getAsync(alias_names, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Module List
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Module_list_controlnet_module_list_getAsync(bool? alias_names, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "controlnet/module_list"
                    urlBuilder_.Append("controlnet/module_list");
                    urlBuilder_.Append('?');
                    if (alias_names != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("alias_names")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(alias_names, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Control Types
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Control_types_controlnet_control_types_getAsync()
        {
            return Control_types_controlnet_control_types_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Control Types
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Control_types_controlnet_control_types_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "controlnet/control_types"
                    urlBuilder_.Append("controlnet/control_types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Settings_controlnet_settings_getAsync()
        {
            return Settings_controlnet_settings_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Settings
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Settings_controlnet_settings_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "controlnet/settings"
                    urlBuilder_.Append("controlnet/settings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Detect
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Detect_controlnet_detect_postAsync(Body_detect_controlnet_detect_post body)
        {
            return Detect_controlnet_detect_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detect
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Detect_controlnet_detect_postAsync(Body_detect_controlnet_detect_post body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "controlnet/detect"
                    urlBuilder_.Append("controlnet/detect");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Config
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_config_state_config_json_getAsync()
        {
            return Get_config_state_config_json_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Config
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_config_state_config_json_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "state/config.json"
                    urlBuilder_.Append("state/config.json");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body_detect_controlnet_detect_post
    {
        [Newtonsoft.Json.JsonProperty("controlnet_module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Controlnet_module { get; set; } = "none";

        [Newtonsoft.Json.JsonProperty("controlnet_input_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Controlnet_input_images { get; set; }

        [Newtonsoft.Json.JsonProperty("controlnet_processor_res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Controlnet_processor_res { get; set; } = 512;

        [Newtonsoft.Json.JsonProperty("controlnet_threshold_a", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Controlnet_threshold_a { get; set; } = 64D;

        [Newtonsoft.Json.JsonProperty("controlnet_threshold_b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Controlnet_threshold_b { get; set; } = 64D;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateResponse
    {
        /// <summary>
        /// Response string from create embedding or hypernetwork task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Info { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmbeddingItem
    {
        /// <summary>
        /// The number of steps that were used to train this embedding, if available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("step", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Step { get; set; }

        /// <summary>
        /// The hash of the checkpoint this embedding was trained on, if available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_checkpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_checkpoint { get; set; }

        /// <summary>
        /// The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use `sd_checkpoint` instead
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_checkpoint_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_checkpoint_name { get; set; }

        /// <summary>
        /// The length of each individual vector in the embedding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shape", Required = Newtonsoft.Json.Required.Always)]
        public int Shape { get; set; }

        /// <summary>
        /// The number of vectors in the embedding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vectors", Required = Newtonsoft.Json.Required.Always)]
        public int Vectors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmbeddingsResponse
    {
        /// <summary>
        /// Embeddings loaded for the current model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loaded", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, EmbeddingItem> Loaded { get; set; } = new System.Collections.Generic.Dictionary<string, EmbeddingItem>();

        /// <summary>
        /// Embeddings skipped for the current model (likely due to architecture incompatibility)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skipped", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, EmbeddingItem> Skipped { get; set; } = new System.Collections.Generic.Dictionary<string, EmbeddingItem>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtensionItem
    {
        /// <summary>
        /// Extension name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Extension Repository URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remote", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Remote { get; set; }

        /// <summary>
        /// Extension Repository Branch
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Branch { get; set; }

        /// <summary>
        /// Extension Repository Commit Hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commit_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Commit_hash { get; set; }

        /// <summary>
        /// Extension Version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; }

        /// <summary>
        /// Extension Repository Commit Date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commit_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Commit_date { get; set; }

        /// <summary>
        /// Flag specifying whether this extension is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtrasBatchImagesRequest
    {
        /// <summary>
        /// Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resize_mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtrasBatchImagesRequestResize_mode? Resize_mode { get; set; } = A1111TxtToImgPlugin.ExtrasBatchImagesRequestResize_mode._0;

        /// <summary>
        /// Should the backend return the generated image?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_extras_results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Show_extras_results { get; set; } = true;

        /// <summary>
        /// Sets the visibility of GFPGAN, values should be between 0 and 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gfpgan_visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Gfpgan_visibility { get; set; } = 0D;

        /// <summary>
        /// Sets the visibility of CodeFormer, values should be between 0 and 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeformer_visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Codeformer_visibility { get; set; } = 0D;

        /// <summary>
        /// Sets the weight of CodeFormer, values should be between 0 and 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeformer_weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Codeformer_weight { get; set; } = 0D;

        /// <summary>
        /// By how much to upscale the image, only used when resize_mode=0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_resize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1.0D, 8.0D)]
        public double? Upscaling_resize { get; set; } = 2D;

        /// <summary>
        /// Target width for the upscaler to hit. Only used when resize_mode=1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_resize_w", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Upscaling_resize_w { get; set; } = 512;

        /// <summary>
        /// Target height for the upscaler to hit. Only used when resize_mode=1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_resize_h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Upscaling_resize_h { get; set; } = 512;

        /// <summary>
        /// Should the upscaler crop the image to fit in the chosen size?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_crop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Upscaling_crop { get; set; } = true;

        /// <summary>
        /// The name of the main upscaler to use, it has to be one of this list: 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaler_1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upscaler_1 { get; set; } = "None";

        /// <summary>
        /// The name of the secondary upscaler to use, it has to be one of this list: 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaler_2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upscaler_2 { get; set; } = "None";

        /// <summary>
        /// Sets the visibility of secondary upscaler, values should be between 0 and 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extras_upscaler_2_visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Extras_upscaler_2_visibility { get; set; } = 0D;

        /// <summary>
        /// Should the upscaler run before restoring faces?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscale_first", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Upscale_first { get; set; } = false;

        /// <summary>
        /// List of images to work on. Must be Base64 strings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FileData> ImageList { get; set; } = new System.Collections.ObjectModel.Collection<FileData>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtrasBatchImagesResponse
    {
        /// <summary>
        /// A series of HTML tags containing the process info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("html_info", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Html_info { get; set; }

        /// <summary>
        /// The generated images in base64 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Images { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtrasSingleImageRequest
    {
        /// <summary>
        /// Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resize_mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtrasSingleImageRequestResize_mode? Resize_mode { get; set; } = A1111TxtToImgPlugin.ExtrasSingleImageRequestResize_mode._0;

        /// <summary>
        /// Should the backend return the generated image?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_extras_results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Show_extras_results { get; set; } = true;

        /// <summary>
        /// Sets the visibility of GFPGAN, values should be between 0 and 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gfpgan_visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Gfpgan_visibility { get; set; } = 0D;

        /// <summary>
        /// Sets the visibility of CodeFormer, values should be between 0 and 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeformer_visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Codeformer_visibility { get; set; } = 0D;

        /// <summary>
        /// Sets the weight of CodeFormer, values should be between 0 and 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeformer_weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Codeformer_weight { get; set; } = 0D;

        /// <summary>
        /// By how much to upscale the image, only used when resize_mode=0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_resize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1.0D, 8.0D)]
        public double? Upscaling_resize { get; set; } = 2D;

        /// <summary>
        /// Target width for the upscaler to hit. Only used when resize_mode=1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_resize_w", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Upscaling_resize_w { get; set; } = 512;

        /// <summary>
        /// Target height for the upscaler to hit. Only used when resize_mode=1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_resize_h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Upscaling_resize_h { get; set; } = 512;

        /// <summary>
        /// Should the upscaler crop the image to fit in the chosen size?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_crop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Upscaling_crop { get; set; } = true;

        /// <summary>
        /// The name of the main upscaler to use, it has to be one of this list: 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaler_1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upscaler_1 { get; set; } = "None";

        /// <summary>
        /// The name of the secondary upscaler to use, it has to be one of this list: 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaler_2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upscaler_2 { get; set; } = "None";

        /// <summary>
        /// Sets the visibility of secondary upscaler, values should be between 0 and 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extras_upscaler_2_visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Extras_upscaler_2_visibility { get; set; } = 0D;

        /// <summary>
        /// Should the upscaler run before restoring faces?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscale_first", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Upscale_first { get; set; } = false;

        /// <summary>
        /// Image to work on, must be a Base64 string containing the image's data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; } = "";

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtrasSingleImageResponse
    {
        /// <summary>
        /// A series of HTML tags containing the process info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("html_info", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Html_info { get; set; }

        /// <summary>
        /// The generated image in base64 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FaceRestorerItem
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("cmd_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cmd_dir { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileData
    {
        /// <summary>
        /// Base64 representation of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Flags
    {
        /// <summary>
        /// ==SUPPRESS==
        /// </summary>
        [Newtonsoft.Json.JsonProperty("f", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? F { get; set; } = false;

        /// <summary>
        /// launch.py argument: download updates for all extensions when starting the program
        /// </summary>
        [Newtonsoft.Json.JsonProperty("update_all_extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Update_all_extensions { get; set; } = false;

        /// <summary>
        /// launch.py argument: do not check python version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_python_version_check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_python_version_check { get; set; } = false;

        /// <summary>
        /// launch.py argument: do not check if CUDA is able to work properly
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_torch_cuda_test", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_torch_cuda_test { get; set; } = false;

        /// <summary>
        /// launch.py argument: install the appropriate version of xformers even if you have some version already installed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reinstall_xformers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reinstall_xformers { get; set; } = false;

        /// <summary>
        /// launch.py argument: install the appropriate version of torch even if you have some version already installed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reinstall_torch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reinstall_torch { get; set; } = false;

        /// <summary>
        /// launch.py argument: check for updates at startup
        /// </summary>
        [Newtonsoft.Json.JsonProperty("update_check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Update_check { get; set; } = false;

        /// <summary>
        /// launch.py argument: configure server for testing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("test_server", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Test_server { get; set; } = false;

        /// <summary>
        /// launch.py argument: print a detailed log of what's happening at startup
        /// </summary>
        [Newtonsoft.Json.JsonProperty("log_startup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Log_startup { get; set; } = false;

        /// <summary>
        /// launch.py argument: skip all environment preparation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_prepare_environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_prepare_environment { get; set; } = false;

        /// <summary>
        /// launch.py argument: skip installation of packages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_install", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_install { get; set; } = false;

        /// <summary>
        /// launch.py argument: dump limited sysinfo file (without information about extensions, options) to disk and quit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dump_sysinfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Dump_sysinfo { get; set; } = false;

        /// <summary>
        /// log level; one of: CRITICAL, ERROR, WARNING, INFO, DEBUG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loglevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Loglevel { get; set; }

        /// <summary>
        /// do not download CLIP model even if it's not included in the checkpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("do_not_download_clip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Do_not_download_clip { get; set; } = false;

        /// <summary>
        /// base path where all user data is stored
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data_dir { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui";

        /// <summary>
        /// path to config which constructs model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Config { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\configs\\v1-inference.yaml";

        /// <summary>
        /// path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ckpt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ckpt { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\model.ckpt";

        /// <summary>
        /// Path to directory with stable diffusion checkpoints
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ckpt_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ckpt_dir { get; set; }

        /// <summary>
        /// Path to directory with VAE files
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vae_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vae_dir { get; set; }

        /// <summary>
        /// GFPGAN directory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gfpgan_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gfpgan_dir { get; set; } = "./GFPGAN";

        /// <summary>
        /// GFPGAN model file name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gfpgan_model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gfpgan_model { get; set; }

        /// <summary>
        /// do not switch the model to 16-bit floats
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no_half", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? No_half { get; set; } = false;

        /// <summary>
        /// do not switch the VAE model to 16-bit floats
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no_half_vae", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? No_half_vae { get; set; } = false;

        /// <summary>
        /// do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no_progressbar_hiding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? No_progressbar_hiding { get; set; } = false;

        /// <summary>
        /// maximum batch count value for the UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max_batch_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max_batch_count { get; set; } = 16;

        /// <summary>
        /// embeddings directory for textual inversion (default: embeddings)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embeddings_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Embeddings_dir { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\embeddings";

        /// <summary>
        /// directory with textual inversion templates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textual_inversion_templates_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Textual_inversion_templates_dir { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\textual_inversion_templates";

        /// <summary>
        /// hypernetwork directory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hypernetwork_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hypernetwork_dir { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\hypernetworks";

        /// <summary>
        /// localizations directory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localizations_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Localizations_dir { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\localizations";

        /// <summary>
        /// allow custom script execution from webui
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allow_code { get; set; } = false;

        /// <summary>
        /// enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medvram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Medvram { get; set; } = false;

        /// <summary>
        /// enable --medvram optimization just for SDXL models
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medvram_sdxl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Medvram_sdxl { get; set; } = false;

        /// <summary>
        /// enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lowvram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Lowvram { get; set; } = false;

        /// <summary>
        /// load stable diffusion checkpoint weights to VRAM instead of RAM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lowram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Lowram { get; set; } = false;

        /// <summary>
        /// does not do anything
        /// </summary>
        [Newtonsoft.Json.JsonProperty("always_batch_cond_uncond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Always_batch_cond_uncond { get; set; } = false;

        /// <summary>
        /// does not do anything.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unload_gfpgan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Unload_gfpgan { get; set; } = false;

        /// <summary>
        /// evaluate at this precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Precision { get; set; } = "autocast";

        /// <summary>
        /// upcast sampling. No effect with --no-half. Usually produces similar results to --no-half with better performance while using less memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upcast_sampling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Upcast_sampling { get; set; } = false;

        /// <summary>
        /// use share=True for gradio and make the UI accessible through their site
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Share { get; set; } = false;

        /// <summary>
        /// ngrok authtoken, alternative to gradio --share
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ngrok", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ngrok { get; set; }

        /// <summary>
        /// does not do anything.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ngrok_region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ngrok_region { get; set; } = "";

        /// <summary>
        /// The options to pass to ngrok in JSON format, e.g.: '{"authtoken_from_env":true, "basic_auth":"user:password", "oauth_provider":"google", "oauth_allow_emails":"user@asdf.com"}'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ngrok_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Ngrok_options { get; set; }

        /// <summary>
        /// enable extensions tab regardless of other options
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable_insecure_extension_access", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable_insecure_extension_access { get; set; } = false;

        /// <summary>
        /// Path to directory with codeformer model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeformer_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codeformer_models_path { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\Codeformer";

        /// <summary>
        /// Path to directory with GFPGAN model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gfpgan_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gfpgan_models_path { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\GFPGAN";

        /// <summary>
        /// Path to directory with ESRGAN model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("esrgan_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Esrgan_models_path { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\ESRGAN";

        /// <summary>
        /// Path to directory with BSRGAN model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bsrgan_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bsrgan_models_path { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\BSRGAN";

        /// <summary>
        /// Path to directory with RealESRGAN model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realesrgan_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Realesrgan_models_path { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\RealESRGAN";

        /// <summary>
        /// Path to directory with CLIP model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clip_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clip_models_path { get; set; }

        /// <summary>
        /// enable xformers for cross attention layers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xformers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Xformers { get; set; } = false;

        /// <summary>
        /// enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("force_enable_xformers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Force_enable_xformers { get; set; } = false;

        /// <summary>
        /// enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xformers_flash_attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Xformers_flash_attention { get; set; } = false;

        /// <summary>
        /// does not do anything
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deepdanbooru", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deepdanbooru { get; set; } = false;

        /// <summary>
        /// prefer Doggettx's cross-attention layer optimization for automatic choice of optimization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opt_split_attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Opt_split_attention { get; set; } = false;

        /// <summary>
        /// prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opt_sub_quad_attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Opt_sub_quad_attention { get; set; } = false;

        /// <summary>
        /// query chunk size for the sub-quadratic cross-attention layer optimization to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sub_quad_q_chunk_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sub_quad_q_chunk_size { get; set; } = 1024;

        /// <summary>
        /// kv chunk size for the sub-quadratic cross-attention layer optimization to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sub_quad_kv_chunk_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub_quad_kv_chunk_size { get; set; }

        /// <summary>
        /// the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sub_quad_chunk_threshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub_quad_chunk_threshold { get; set; }

        /// <summary>
        /// prefer InvokeAI's cross-attention layer optimization for automatic choice of optimization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opt_split_attention_invokeai", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Opt_split_attention_invokeai { get; set; } = false;

        /// <summary>
        /// prefer older version of split attention optimization for automatic choice of optimization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opt_split_attention_v1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Opt_split_attention_v1 { get; set; } = false;

        /// <summary>
        /// prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.*
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opt_sdp_attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Opt_sdp_attention { get; set; } = false;

        /// <summary>
        /// prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.*
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opt_sdp_no_mem_attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Opt_sdp_no_mem_attention { get; set; } = false;

        /// <summary>
        /// prefer no cross-attention layer optimization for automatic choice of optimization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_opt_split_attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_opt_split_attention { get; set; } = false;

        /// <summary>
        /// do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_nan_check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_nan_check { get; set; } = false;

        /// <summary>
        /// use CPU as torch device for specified modules
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_cpu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Use_cpu { get; set; }

        /// <summary>
        /// use Intel XPU as torch device
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_ipex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Use_ipex { get; set; } = false;

        /// <summary>
        /// disable an optimization that reduces RAM use when loading a model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_model_loading_ram_optimization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_model_loading_ram_optimization { get; set; } = false;

        /// <summary>
        /// launch gradio with 0.0.0.0 as server name, allowing to respond to network requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Listen { get; set; } = false;

        /// <summary>
        /// launch gradio with given server port, you need root/admin rights for ports &lt; 1024, defaults to 7860 if available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Port { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_negative_prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Show_negative_prompt { get; set; } = false;

        /// <summary>
        /// filename to use for ui configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui_config_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ui_config_file { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\ui-config.json";

        /// <summary>
        /// hide directory configuration from webui
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hide_ui_dir_config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hide_ui_dir_config { get; set; } = false;

        /// <summary>
        /// disable editing settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freeze_settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Freeze_settings { get; set; } = false;

        /// <summary>
        /// filename to use for ui settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui_settings_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ui_settings_file { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\config.json";

        /// <summary>
        /// launch gradio with --debug option
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_debug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gradio_debug { get; set; } = false;

        /// <summary>
        /// set gradio authentication like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_auth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gradio_auth { get; set; }

        /// <summary>
        /// set gradio authentication file path ex. "/path/to/auth/file" same auth format as --gradio-auth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_auth_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gradio_auth_path { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_img2img_tool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gradio_img2img_tool { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_inpaint_tool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gradio_inpaint_tool { get; set; }

        /// <summary>
        /// add path to gradio's allowed_paths, make it possible to serve files from it
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_allowed_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Gradio_allowed_path { get; set; }

        /// <summary>
        /// change memory type for stable diffusion to channels last
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opt_channelslast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Opt_channelslast { get; set; } = false;

        /// <summary>
        /// filename to use for styles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("styles_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Styles_file { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\styles.csv";

        /// <summary>
        /// open the webui URL in the system's default browser upon launch
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autolaunch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Autolaunch { get; set; } = false;

        /// <summary>
        /// launches the UI with light or dark theme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Theme { get; set; }

        /// <summary>
        /// use textbox for seeds in UI (no up/down, but possible to input long seeds)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_textbox_seed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Use_textbox_seed { get; set; } = false;

        /// <summary>
        /// do not output progressbars to console
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_console_progressbars", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_console_progressbars { get; set; } = false;

        /// <summary>
        /// does not do anything
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable_console_prompts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable_console_prompts { get; set; } = false;

        /// <summary>
        /// Checkpoint to use as VAE; setting this argument disables all settings related to VAE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vae_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vae_path { get; set; }

        /// <summary>
        /// disable checking pytorch models for malicious code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_safe_unpickle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_safe_unpickle { get; set; } = false;

        /// <summary>
        /// use api=True to launch the API together with the webui (use --nowebui instead for only the API)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Api { get; set; } = false;

        /// <summary>
        /// Set authentication for API like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api_auth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_auth { get; set; }

        /// <summary>
        /// use api-log=True to enable logging of all API requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api_log", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Api_log { get; set; } = false;

        /// <summary>
        /// use api=True to launch the API instead of the webui
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nowebui", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Nowebui { get; set; } = false;

        /// <summary>
        /// Don't load model to quickly launch UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui_debug_mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ui_debug_mode { get; set; } = false;

        /// <summary>
        /// Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_id { get; set; }

        /// <summary>
        /// Administrator rights
        /// </summary>
        [Newtonsoft.Json.JsonProperty("administrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Administrator { get; set; } = false;

        /// <summary>
        /// Allowed CORS origin(s) in the form of a comma-separated list (no spaces)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cors_allow_origins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cors_allow_origins { get; set; }

        /// <summary>
        /// Allowed CORS origin(s) in the form of a single regular expression
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cors_allow_origins_regex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cors_allow_origins_regex { get; set; }

        /// <summary>
        /// Partially enables TLS, requires --tls-certfile to fully function
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tls_keyfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tls_keyfile { get; set; }

        /// <summary>
        /// Partially enables TLS, requires --tls-keyfile to fully function
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tls_certfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tls_certfile { get; set; }

        /// <summary>
        /// When passed, enables the use of self-signed certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_tls_verify", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Disable_tls_verify { get; set; }

        /// <summary>
        /// Sets hostname of server
        /// </summary>
        [Newtonsoft.Json.JsonProperty("server_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Server_name { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_queue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gradio_queue { get; set; } = true;

        /// <summary>
        /// Disables gradio queue; causes the webpage to use http requests instead of websockets; was the default in earlier versions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no_gradio_queue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? No_gradio_queue { get; set; } = false;

        /// <summary>
        /// Do not check versions of torch and xformers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_version_check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_version_check { get; set; } = false;

        /// <summary>
        /// disable sha256 hashing of checkpoints to help loading performance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no_hashing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? No_hashing { get; set; } = false;

        /// <summary>
        /// don't download SD1.5 model even if no model is found in --ckpt-dir
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no_download_sd_model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? No_download_sd_model { get; set; } = false;

        /// <summary>
        /// customize the subpath for gradio, use with reverse proxy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subpath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subpath { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add_stop_route", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Add_stop_route { get; set; } = false;

        /// <summary>
        /// enable server stop/restart/kill via api
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api_server_stop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Api_server_stop { get; set; } = false;

        /// <summary>
        /// set timeout_keep_alive for uvicorn
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout_keep_alive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Timeout_keep_alive { get; set; } = 30;

        /// <summary>
        /// prevent all extensions from running regardless of any other settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_all_extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_all_extensions { get; set; } = false;

        /// <summary>
        /// prevent all extensions except built-in from running regardless of any other settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_extra_extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_extra_extensions { get; set; } = false;

        /// <summary>
        /// if load a model at web start, only take effect when --nowebui
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_load_model_at_start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_load_model_at_start { get; set; } = false;

        /// <summary>
        /// Enable the Deforum API
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deforum_api", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deforum_api { get; set; }

        /// <summary>
        /// Enable the simplified version of Deforum API
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deforum_simple_api", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deforum_simple_api { get; set; }

        /// <summary>
        /// Comma-delimited list of deforum settings files to run immediately on startup
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deforum_run_now", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deforum_run_now { get; set; }

        /// <summary>
        /// Whether to shut down the a1111 process immediately after completing the generations passed in to '--deforum-run-now'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deforum_terminate_after_run_now", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deforum_terminate_after_run_now { get; set; }

        /// <summary>
        /// Path to directory with ControlNet models
        /// </summary>
        [Newtonsoft.Json.JsonProperty("controlnet_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Controlnet_dir { get; set; }

        /// <summary>
        /// Path to directory with annotator model directories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("controlnet_annotator_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Controlnet_annotator_models_path { get; set; }

        /// <summary>
        /// do not switch the ControlNet models to 16-bit floats (only needed without --no-half)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no_half_controlnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string No_half_controlnet { get; set; }

        /// <summary>
        /// Cache size for controlnet preprocessor results
        /// </summary>
        [Newtonsoft.Json.JsonProperty("controlnet_preprocessor_cache_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Controlnet_preprocessor_cache_size { get; set; } = 16;

        /// <summary>
        /// Set the log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("controlnet_loglevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Controlnet_loglevel { get; set; } = "INFO";

        /// <summary>
        /// Path to directory with LDSR model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ldsr_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ldsr_models_path { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\LDSR";

        /// <summary>
        /// Path to directory with Lora networks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lora_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lora_dir { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\Lora";

        /// <summary>
        /// Path to directory with LyCORIS networks (for backawards compatibility; can also use --lyco-dir).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lyco_dir_backcompat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lyco_dir_backcompat { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\LyCORIS";

        /// <summary>
        /// Path to directory with ScuNET model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scunet_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scunet_models_path { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\ScuNET";

        /// <summary>
        /// Path to directory with SwinIR model file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("swinir_models_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Swinir_models_path { get; set; } = "G:\\Stable diffusion\\stableDiffusionUi\\stable-diffusion-webui\\models\\SwinIR";

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HTTPValidationError
    {
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidationError> Detail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HypernetworkItem
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageToImageResponse
    {
        /// <summary>
        /// The generated image in base64 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Images { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Parameters { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Info { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InterrogateRequest
    {
        /// <summary>
        /// Image to work on, must be a Base64 string containing the image's data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; } = "";

        /// <summary>
        /// The interrogate model used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; } = "clip";

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatentUpscalerModeItem
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MemoryResponse
    {
        /// <summary>
        /// System memory stats
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ram", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Ram { get; set; } = new object();

        /// <summary>
        /// nVidia CUDA memory stats
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cuda", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Cuda { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Options
    {
        /// <summary>
        /// Always save all generated images
        /// </summary>
        [Newtonsoft.Json.JsonProperty("samples_save", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Samples_save { get; set; } = true;

        /// <summary>
        /// File format for images
        /// </summary>
        [Newtonsoft.Json.JsonProperty("samples_format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Samples_format { get; set; } = "png";

        /// <summary>
        /// Images filename pattern
        /// </summary>
        [Newtonsoft.Json.JsonProperty("samples_filename_pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Samples_filename_pattern { get; set; }

        /// <summary>
        /// Add number to filename when saving
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_images_add_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Save_images_add_number { get; set; } = true;

        /// <summary>
        /// Saving the image to an existing file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_images_replace_action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Save_images_replace_action { get; set; } = "Replace";

        /// <summary>
        /// Always save all generated image grids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_save", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Grid_save { get; set; } = true;

        /// <summary>
        /// File format for grids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Grid_format { get; set; } = "png";

        /// <summary>
        /// Add extended info (seed, prompt) to filename when saving grid
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_extended_filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Grid_extended_filename { get; set; }

        /// <summary>
        /// Do not save grids consisting of one picture
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_only_if_multiple", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Grid_only_if_multiple { get; set; } = true;

        /// <summary>
        /// Prevent empty spots in grid (when set to autodetect)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_prevent_empty_spots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Grid_prevent_empty_spots { get; set; }

        /// <summary>
        /// Archive filename pattern
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_zip_filename_pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Grid_zip_filename_pattern { get; set; }

        /// <summary>
        /// Grid row count; use -1 for autodetect and 0 for it to be same as batch size
        /// </summary>
        [Newtonsoft.Json.JsonProperty("n_rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? N_rows { get; set; } = -1D;

        /// <summary>
        /// Font for image grids that have text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("font", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Font { get; set; }

        /// <summary>
        /// Text color for image grids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_text_active_color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Grid_text_active_color { get; set; } = "#000000";

        /// <summary>
        /// Inactive text color for image grids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_text_inactive_color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Grid_text_inactive_color { get; set; } = "#999999";

        /// <summary>
        /// Background color for image grids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_background_color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Grid_background_color { get; set; } = "#ffffff";

        /// <summary>
        /// Save a copy of image before doing face restoration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_images_before_face_restoration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_images_before_face_restoration { get; set; }

        /// <summary>
        /// Save a copy of image before applying highres fix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_images_before_highres_fix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_images_before_highres_fix { get; set; }

        /// <summary>
        /// Save a copy of image before applying color correction to img2img results
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_images_before_color_correction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_images_before_color_correction { get; set; }

        /// <summary>
        /// For inpainting, save a copy of the greyscale mask
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_mask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_mask { get; set; }

        /// <summary>
        /// For inpainting, save a masked composite
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_mask_composite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_mask_composite { get; set; }

        /// <summary>
        /// Quality for saved jpeg images
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jpeg_quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Jpeg_quality { get; set; } = 80D;

        /// <summary>
        /// Use lossless compression for webp images
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webp_lossless", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Webp_lossless { get; set; }

        /// <summary>
        /// Save copy of large images as JPG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("export_for_4chan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Export_for_4chan { get; set; } = true;

        /// <summary>
        /// File size limit for the above option, MB
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img_downscale_threshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Img_downscale_threshold { get; set; } = 4D;

        /// <summary>
        /// Width/height limit for the above option, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target_side_length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Target_side_length { get; set; } = 4000D;

        /// <summary>
        /// Maximum image size
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img_max_size_mp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Img_max_size_mp { get; set; } = 200D;

        /// <summary>
        /// Use original name for output filename during batch process in extras tab
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_original_name_batch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Use_original_name_batch { get; set; } = true;

        /// <summary>
        /// Use upscaler name as filename suffix in the extras tab
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_upscaler_name_as_suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Use_upscaler_name_as_suffix { get; set; }

        /// <summary>
        /// When using 'Save' button, only save a single selected image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_selected_only", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Save_selected_only { get; set; } = true;

        /// <summary>
        /// Save init images when using img2img
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_init_img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_init_img { get; set; }

        /// <summary>
        /// Directory for temporary images; leave empty for default
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temp_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Temp_dir { get; set; }

        /// <summary>
        /// Cleanup non-default temporary directory when starting webui
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clean_temp_dir_at_start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Clean_temp_dir_at_start { get; set; }

        /// <summary>
        /// Save incomplete images
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_incomplete_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_incomplete_images { get; set; }

        /// <summary>
        /// Play notification sound after image generation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notification_audio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Notification_audio { get; set; } = true;

        /// <summary>
        /// Notification sound volume
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notification_volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Notification_volume { get; set; } = 100D;

        /// <summary>
        /// Output directory for images; if empty, defaults to three directories below
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_samples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Outdir_samples { get; set; }

        /// <summary>
        /// Output directory for txt2img images
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_txt2img_samples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outdir_txt2img_samples { get; set; } = "outputs/txt2img-images";

        /// <summary>
        /// Output directory for img2img images
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_img2img_samples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outdir_img2img_samples { get; set; } = "outputs/img2img-images";

        /// <summary>
        /// Output directory for images from extras tab
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_extras_samples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outdir_extras_samples { get; set; } = "outputs/extras-images";

        /// <summary>
        /// Output directory for grids; if empty, defaults to two directories below
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_grids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Outdir_grids { get; set; }

        /// <summary>
        /// Output directory for txt2img grids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_txt2img_grids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outdir_txt2img_grids { get; set; } = "outputs/txt2img-grids";

        /// <summary>
        /// Output directory for img2img grids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_img2img_grids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outdir_img2img_grids { get; set; } = "outputs/img2img-grids";

        /// <summary>
        /// Directory for saving images using the Save button
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_save", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outdir_save { get; set; } = "log/images";

        /// <summary>
        /// Directory for saving init images when using img2img
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdir_init_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outdir_init_images { get; set; } = "outputs/init-images";

        /// <summary>
        /// Save images to a subdirectory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_to_dirs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Save_to_dirs { get; set; } = true;

        /// <summary>
        /// Save grids to a subdirectory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grid_save_to_dirs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Grid_save_to_dirs { get; set; } = true;

        /// <summary>
        /// When using "Save" button, save images to a subdirectory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_save_to_dirs_for_ui", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Use_save_to_dirs_for_ui { get; set; }

        /// <summary>
        /// Directory name pattern
        /// </summary>
        [Newtonsoft.Json.JsonProperty("directories_filename_pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Directories_filename_pattern { get; set; } = "[date]";

        /// <summary>
        /// Max prompt words for [prompt_words] pattern
        /// </summary>
        [Newtonsoft.Json.JsonProperty("directories_max_prompt_words", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Directories_max_prompt_words { get; set; } = 8D;

        /// <summary>
        /// Tile size for ESRGAN upscalers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ESRGAN_tile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ESRGAN_tile { get; set; } = 192D;

        /// <summary>
        /// Tile overlap for ESRGAN upscalers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ESRGAN_tile_overlap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ESRGAN_tile_overlap { get; set; } = 8D;

        /// <summary>
        /// Select which Real-ESRGAN models to show in the web UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realesrgan_enabled_models", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Realesrgan_enabled_models { get; set; }

        /// <summary>
        /// Upscaler for img2img
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaler_for_img2img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Upscaler_for_img2img { get; set; }

        /// <summary>
        /// Restore faces
        /// </summary>
        [Newtonsoft.Json.JsonProperty("face_restoration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Face_restoration { get; set; }

        /// <summary>
        /// Face restoration model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("face_restoration_model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Face_restoration_model { get; set; } = "CodeFormer";

        /// <summary>
        /// CodeFormer weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code_former_weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Code_former_weight { get; set; } = 0.5D;

        /// <summary>
        /// Move face restoration model from VRAM into RAM after processing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("face_restoration_unload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Face_restoration_unload { get; set; }

        /// <summary>
        /// Automatically open webui in browser on startup
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_launch_browser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Auto_launch_browser { get; set; } = "Local";

        /// <summary>
        /// Print prompts to console when generating with txt2img and img2img.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable_console_prompts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Enable_console_prompts { get; set; }

        /// <summary>
        /// Show warnings in console.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Show_warnings { get; set; }

        /// <summary>
        /// Show gradio deprecation warnings in console.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_gradio_deprecation_warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Show_gradio_deprecation_warnings { get; set; } = true;

        /// <summary>
        /// VRAM usage polls per second during generation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memmon_poll_rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Memmon_poll_rate { get; set; } = 8D;

        /// <summary>
        /// Always print all generation info to standard output
        /// </summary>
        [Newtonsoft.Json.JsonProperty("samples_log_stdout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Samples_log_stdout { get; set; }

        /// <summary>
        /// Add a second progress bar to the console that shows progress for an entire job.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("multiple_tqdm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Multiple_tqdm { get; set; } = true;

        /// <summary>
        /// Print extra hypernetwork information to console.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("print_hypernet_extra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Print_hypernet_extra { get; set; }

        /// <summary>
        /// Load models/files in hidden directories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("list_hidden_files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? List_hidden_files { get; set; } = true;

        /// <summary>
        /// Disable memmapping for loading .safetensors files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_mmap_load_safetensors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Disable_mmap_load_safetensors { get; set; }

        /// <summary>
        /// Prevent Stability-AI's ldm/sgm modules from printing noise to console.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hide_ldm_prints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hide_ldm_prints { get; set; } = true;

        /// <summary>
        /// Print stack traces before exiting the program with ctrl+c.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dump_stacks_on_signal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Dump_stacks_on_signal { get; set; }

        /// <summary>
        /// Allow http:// and https:// URLs for input images in API
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api_enable_requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Api_enable_requests { get; set; } = true;

        /// <summary>
        /// Forbid URLs to local resources
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api_forbid_local_requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Api_forbid_local_requests { get; set; } = true;

        /// <summary>
        /// User agent for requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api_useragent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Api_useragent { get; set; }

        /// <summary>
        /// Move VAE and CLIP to RAM when training if possible. Saves VRAM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unload_models_when_training", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Unload_models_when_training { get; set; }

        /// <summary>
        /// Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pin_memory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Pin_memory { get; set; }

        /// <summary>
        /// Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_optimizer_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_optimizer_state { get; set; }

        /// <summary>
        /// Save textual inversion and hypernet settings to a text file whenever training starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_training_settings_to_txt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Save_training_settings_to_txt { get; set; } = true;

        /// <summary>
        /// Filename word regex
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataset_filename_word_regex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Dataset_filename_word_regex { get; set; }

        /// <summary>
        /// Filename join string
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataset_filename_join_string", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dataset_filename_join_string { get; set; } = " ";

        /// <summary>
        /// Number of repeats for a single input image per epoch; used only for displaying epoch number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("training_image_repeats_per_epoch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Training_image_repeats_per_epoch { get; set; } = 1D;

        /// <summary>
        /// Save an csv containing the loss to log directory every N steps, 0 to disable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("training_write_csv_every", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Training_write_csv_every { get; set; } = 500D;

        /// <summary>
        /// Use cross attention optimizations while training
        /// </summary>
        [Newtonsoft.Json.JsonProperty("training_xattention_optimizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Training_xattention_optimizations { get; set; }

        /// <summary>
        /// Enable tensorboard logging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("training_enable_tensorboard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Training_enable_tensorboard { get; set; }

        /// <summary>
        /// Save generated images within tensorboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("training_tensorboard_save_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Training_tensorboard_save_images { get; set; }

        /// <summary>
        /// How often, in seconds, to flush the pending tensorboard events and summaries to disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("training_tensorboard_flush_every", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Training_tensorboard_flush_every { get; set; } = 120D;

        /// <summary>
        /// Stable Diffusion checkpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_model_checkpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sd_model_checkpoint { get; set; }

        /// <summary>
        /// Maximum number of checkpoints loaded at the same time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_checkpoints_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sd_checkpoints_limit { get; set; } = 1D;

        /// <summary>
        /// Only keep one model on device
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_checkpoints_keep_in_cpu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sd_checkpoints_keep_in_cpu { get; set; } = true;

        /// <summary>
        /// Checkpoints to cache in RAM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_checkpoint_cache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sd_checkpoint_cache { get; set; }

        /// <summary>
        /// SD Unet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_unet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_unet { get; set; } = "Automatic";

        /// <summary>
        /// Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable_quantization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Enable_quantization { get; set; }

        /// <summary>
        /// Enable emphasis
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable_emphasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable_emphasis { get; set; } = true;

        /// <summary>
        /// Make K-diffusion samplers produce same images in a batch as when making a single image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable_batch_seeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable_batch_seeds { get; set; } = true;

        /// <summary>
        /// Prompt word wrap length limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comma_padding_backtrack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Comma_padding_backtrack { get; set; } = 20D;

        /// <summary>
        /// Clip skip
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CLIP_stop_at_last_layers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CLIP_stop_at_last_layers { get; set; } = 1D;

        /// <summary>
        /// Upcast cross attention layer to float32
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upcast_attn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Upcast_attn { get; set; }

        /// <summary>
        /// Random number generator source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("randn_source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Randn_source { get; set; } = "GPU";

        /// <summary>
        /// Tiling
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Tiling { get; set; }

        /// <summary>
        /// Hires fix: which pass to enable refiner for
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hires_fix_refiner_pass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hires_fix_refiner_pass { get; set; } = "second pass";

        /// <summary>
        /// crop top coordinate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sdxl_crop_top", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sdxl_crop_top { get; set; }

        /// <summary>
        /// crop left coordinate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sdxl_crop_left", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sdxl_crop_left { get; set; }

        /// <summary>
        /// SDXL low aesthetic score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sdxl_refiner_low_aesthetic_score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sdxl_refiner_low_aesthetic_score { get; set; } = 2.5D;

        /// <summary>
        /// SDXL high aesthetic score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sdxl_refiner_high_aesthetic_score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sdxl_refiner_high_aesthetic_score { get; set; } = 6D;

        [Newtonsoft.Json.JsonProperty("sd_vae_explanation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_vae_explanation { get; set; } = "<abbr title=\'Variational autoencoder\'>VAE</abbr> is a neural network that transforms a standard <abbr title=\'red/green/blue\'>RGB</abbr>\nimage into latent space representation and back. Latent space representation is what stable diffusion is working on during sampling\n(i.e. when the progress bar is between empty and full). For txt2img, VAE is used to create a resulting image after the sampling is finished.\nFor img2img, VAE is used to process user\'s input image before the sampling, and to create an image after sampling.";

        /// <summary>
        /// VAE Checkpoints to cache in RAM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_vae_checkpoint_cache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sd_vae_checkpoint_cache { get; set; }

        /// <summary>
        /// SD VAE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_vae", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_vae { get; set; } = "Automatic";

        /// <summary>
        /// Selected VAE overrides per-model preferences
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_vae_overrides_per_model_preferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sd_vae_overrides_per_model_preferences { get; set; } = true;

        /// <summary>
        /// Automatically revert VAE to 32-bit floats
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_vae_precision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Auto_vae_precision { get; set; } = true;

        /// <summary>
        /// VAE type for encode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_vae_encode_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_vae_encode_method { get; set; } = "Full";

        /// <summary>
        /// VAE type for decode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_vae_decode_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_vae_decode_method { get; set; } = "Full";

        /// <summary>
        /// Inpainting conditioning mask strength
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inpainting_mask_weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Inpainting_mask_weight { get; set; } = 1D;

        /// <summary>
        /// Noise multiplier for img2img
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initial_noise_multiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Initial_noise_multiplier { get; set; } = 1D;

        /// <summary>
        /// Extra noise multiplier for img2img and hires fix
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_extra_noise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Img2img_extra_noise { get; set; }

        /// <summary>
        /// Apply color correction to img2img results to match original colors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_color_correction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Img2img_color_correction { get; set; }

        /// <summary>
        /// With img2img, do exactly the amount of steps the slider specifies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_fix_steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Img2img_fix_steps { get; set; }

        /// <summary>
        /// With img2img, fill transparent parts of the input image with this color.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_background_color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img2img_background_color { get; set; } = "#ffffff";

        /// <summary>
        /// Height of the image editor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_editor_height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Img2img_editor_height { get; set; } = 720D;

        /// <summary>
        /// Sketch initial brush color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_sketch_default_brush_color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img2img_sketch_default_brush_color { get; set; } = "#ffffff";

        /// <summary>
        /// Inpaint mask brush color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_inpaint_mask_brush_color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img2img_inpaint_mask_brush_color { get; set; } = "#ffffff";

        /// <summary>
        /// Inpaint sketch initial brush color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_inpaint_sketch_default_brush_color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img2img_inpaint_sketch_default_brush_color { get; set; } = "#ffffff";

        /// <summary>
        /// For inpainting, include the greyscale mask in results for web
        /// </summary>
        [Newtonsoft.Json.JsonProperty("return_mask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Return_mask { get; set; }

        /// <summary>
        /// For inpainting, include masked composite in results for web
        /// </summary>
        [Newtonsoft.Json.JsonProperty("return_mask_composite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Return_mask_composite { get; set; }

        /// <summary>
        /// Show the first N batch img2img results in UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_batch_show_results_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Img2img_batch_show_results_limit { get; set; } = 32D;

        /// <summary>
        /// Cross attention optimization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cross_attention_optimization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cross_attention_optimization { get; set; } = "Automatic";

        /// <summary>
        /// Negative Guidance minimum sigma
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s_min_uncond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object S_min_uncond { get; set; }

        /// <summary>
        /// Token merging ratio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_merging_ratio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Token_merging_ratio { get; set; }

        /// <summary>
        /// Token merging ratio for img2img
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_merging_ratio_img2img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Token_merging_ratio_img2img { get; set; }

        /// <summary>
        /// Token merging ratio for high-res pass
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_merging_ratio_hr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Token_merging_ratio_hr { get; set; }

        /// <summary>
        /// Pad prompt/negative prompt to be same length
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pad_cond_uncond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Pad_cond_uncond { get; set; }

        /// <summary>
        /// Persistent cond cache
        /// </summary>
        [Newtonsoft.Json.JsonProperty("persistent_cond_cache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Persistent_cond_cache { get; set; } = true;

        /// <summary>
        /// Batch cond/uncond
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batch_cond_uncond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Batch_cond_uncond { get; set; } = true;

        /// <summary>
        /// Use old emphasis implementation. Can be useful to reproduce old seeds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_old_emphasis_implementation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Use_old_emphasis_implementation { get; set; }

        /// <summary>
        /// Use old karras scheduler sigmas (0.1 to 10).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_old_karras_scheduler_sigmas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Use_old_karras_scheduler_sigmas { get; set; }

        /// <summary>
        /// Do not make DPM++ SDE deterministic across different batch sizes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no_dpmpp_sde_batch_determinism", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object No_dpmpp_sde_batch_determinism { get; set; }

        /// <summary>
        /// For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_old_hires_fix_width_height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Use_old_hires_fix_width_height { get; set; }

        /// <summary>
        /// Do not fix prompt schedule for second order samplers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dont_fix_second_order_samplers_schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Dont_fix_second_order_samplers_schedule { get; set; }

        /// <summary>
        /// For hires fix, calculate conds of second pass using extra networks of first pass.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hires_fix_use_firstpass_conds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Hires_fix_use_firstpass_conds { get; set; }

        /// <summary>
        /// Use old prompt editing timelines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_old_scheduling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Use_old_scheduling { get; set; }

        /// <summary>
        /// Keep models in VRAM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interrogate_keep_models_in_memory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Interrogate_keep_models_in_memory { get; set; }

        /// <summary>
        /// Include ranks of model tags matches in results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interrogate_return_ranks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Interrogate_return_ranks { get; set; }

        /// <summary>
        /// BLIP: num_beams
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interrogate_clip_num_beams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Interrogate_clip_num_beams { get; set; } = 1D;

        /// <summary>
        /// BLIP: minimum description length
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interrogate_clip_min_length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Interrogate_clip_min_length { get; set; } = 24D;

        /// <summary>
        /// BLIP: maximum description length
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interrogate_clip_max_length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Interrogate_clip_max_length { get; set; } = 48D;

        /// <summary>
        /// CLIP: maximum number of lines in text file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interrogate_clip_dict_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Interrogate_clip_dict_limit { get; set; } = 1500D;

        /// <summary>
        /// CLIP: skip inquire categories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interrogate_clip_skip_categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Interrogate_clip_skip_categories { get; set; }

        /// <summary>
        /// deepbooru: score threshold
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interrogate_deepbooru_score_threshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Interrogate_deepbooru_score_threshold { get; set; } = 0.5D;

        /// <summary>
        /// deepbooru: sort tags alphabetically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deepbooru_sort_alpha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deepbooru_sort_alpha { get; set; } = true;

        /// <summary>
        /// deepbooru: use spaces in tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deepbooru_use_spaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deepbooru_use_spaces { get; set; } = true;

        /// <summary>
        /// deepbooru: escape (\) brackets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deepbooru_escape", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deepbooru_escape { get; set; } = true;

        /// <summary>
        /// deepbooru: filter out those tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deepbooru_filter_tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Deepbooru_filter_tags { get; set; }

        /// <summary>
        /// Show hidden directories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_show_hidden_directories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Extra_networks_show_hidden_directories { get; set; } = true;

        /// <summary>
        /// Add a '/' to the beginning of directory buttons
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_dir_button_function", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extra_networks_dir_button_function { get; set; }

        /// <summary>
        /// Show cards for models in hidden directories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_hidden_models", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extra_networks_hidden_models { get; set; } = "When searched";

        /// <summary>
        /// Default multiplier for extra networks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_default_multiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Extra_networks_default_multiplier { get; set; } = 1D;

        /// <summary>
        /// Card width for Extra Networks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_card_width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extra_networks_card_width { get; set; }

        /// <summary>
        /// Card height for Extra Networks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_card_height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extra_networks_card_height { get; set; }

        /// <summary>
        /// Card text scale
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_card_text_scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Extra_networks_card_text_scale { get; set; } = 1D;

        /// <summary>
        /// Show description on card
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_card_show_desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Extra_networks_card_show_desc { get; set; } = true;

        /// <summary>
        /// Default order field for Extra Networks cards
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_card_order_field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extra_networks_card_order_field { get; set; } = "Path";

        /// <summary>
        /// Default order for Extra Networks cards
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_card_order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extra_networks_card_order { get; set; } = "Ascending";

        /// <summary>
        /// Extra networks separator
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_networks_add_text_separator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extra_networks_add_text_separator { get; set; } = " ";

        /// <summary>
        /// Extra networks tab order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui_extra_networks_tab_reorder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Ui_extra_networks_tab_reorder { get; set; }

        /// <summary>
        /// Print a list of Textual Inversion embeddings when loading model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textual_inversion_print_at_load", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Textual_inversion_print_at_load { get; set; }

        /// <summary>
        /// Add Textual Inversion hashes to infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textual_inversion_add_hashes_to_infotext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Textual_inversion_add_hashes_to_infotext { get; set; } = true;

        /// <summary>
        /// Add hypernetwork to prompt
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_hypernetwork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_hypernetwork { get; set; } = "None";

        /// <summary>
        /// Precision for (attention:1.1) when editing the prompt with Ctrl+up/down
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyedit_precision_attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Keyedit_precision_attention { get; set; } = 0.1D;

        /// <summary>
        /// Precision for &lt;extra networks:0.9&gt; when editing the prompt with Ctrl+up/down
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyedit_precision_extra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Keyedit_precision_extra { get; set; } = 0.05D;

        /// <summary>
        /// Word delimiters when editing the prompt with Ctrl+up/down
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyedit_delimiters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keyedit_delimiters { get; set; } = ".,\\/!?%^*;:{}=`~() ";

        /// <summary>
        /// Ctrl+up/down whitespace delimiters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyedit_delimiters_whitespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Keyedit_delimiters_whitespace { get; set; }

        /// <summary>
        /// Alt+left/right moves prompt elements
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyedit_move", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Keyedit_move { get; set; } = true;

        /// <summary>
        /// Disable prompt token counters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_token_counters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Disable_token_counters { get; set; }

        /// <summary>
        /// Show grid in gallery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("return_grid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Return_grid { get; set; } = true;

        /// <summary>
        /// Do not show any images in gallery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("do_not_show_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Do_not_show_images { get; set; }

        /// <summary>
        /// Full page image viewer: enable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("js_modal_lightbox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Js_modal_lightbox { get; set; } = true;

        /// <summary>
        /// Full page image viewer: show images zoomed in by default
        /// </summary>
        [Newtonsoft.Json.JsonProperty("js_modal_lightbox_initially_zoomed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Js_modal_lightbox_initially_zoomed { get; set; } = true;

        /// <summary>
        /// Full page image viewer: navigate with gamepad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("js_modal_lightbox_gamepad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Js_modal_lightbox_gamepad { get; set; }

        /// <summary>
        /// Full page image viewer: gamepad repeat period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("js_modal_lightbox_gamepad_repeat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Js_modal_lightbox_gamepad_repeat { get; set; } = 250D;

        /// <summary>
        /// Gallery height
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gallery_height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Gallery_height { get; set; }

        /// <summary>
        /// Compact prompt layout
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compact_prompt_box", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Compact_prompt_box { get; set; }

        /// <summary>
        /// Use dropdown for sampler selection instead of radio group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("samplers_in_dropdown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Samplers_in_dropdown { get; set; } = true;

        /// <summary>
        /// Show Width/Height and Batch sliders in same row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions_and_batch_together", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Dimensions_and_batch_together { get; set; } = true;

        /// <summary>
        /// Checkpoint dropdown: use filenames without paths
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_checkpoint_dropdown_use_short", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sd_checkpoint_dropdown_use_short { get; set; }

        /// <summary>
        /// Hires fix: show hires checkpoint and sampler selection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hires_fix_show_sampler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Hires_fix_show_sampler { get; set; }

        /// <summary>
        /// Hires fix: show hires prompt and negative prompt
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hires_fix_show_prompts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Hires_fix_show_prompts { get; set; }

        /// <summary>
        /// Settings in txt2img hidden under Accordion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("txt2img_settings_accordion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Txt2img_settings_accordion { get; set; }

        /// <summary>
        /// Settings in img2img hidden under Accordion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img_settings_accordion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Img2img_settings_accordion { get; set; }

        /// <summary>
        /// Localization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Localization { get; set; } = "None";

        /// <summary>
        /// Quicksettings list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quicksettings_list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Quicksettings_list { get; set; }

        /// <summary>
        /// UI tab order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui_tab_order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Ui_tab_order { get; set; }

        /// <summary>
        /// Hidden UI tabs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hidden_tabs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Hidden_tabs { get; set; }

        /// <summary>
        /// UI item order for txt2img/img2img tabs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui_reorder_list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Ui_reorder_list { get; set; }

        /// <summary>
        /// Gradio theme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gradio_theme { get; set; } = "Default";

        /// <summary>
        /// Cache gradio themes locally
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradio_themes_cache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gradio_themes_cache { get; set; } = true;

        /// <summary>
        /// Show generation progress in window title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_progress_in_title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Show_progress_in_title { get; set; } = true;

        /// <summary>
        /// Send seed when sending prompt or image to other interface
        /// </summary>
        [Newtonsoft.Json.JsonProperty("send_seed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Send_seed { get; set; } = true;

        /// <summary>
        /// Send size when sending prompt or image to another interface
        /// </summary>
        [Newtonsoft.Json.JsonProperty("send_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Send_size { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("infotext_explanation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Infotext_explanation { get; set; } = "Infotext is what this software calls the text that contains generation parameters and can be used to generate the same picture again.\nIt is displayed in UI below the image. To use infotext, paste it into the prompt and click the \u2199\ufe0f paste button.";

        /// <summary>
        /// Write infotext to metadata of the generated image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable_pnginfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable_pnginfo { get; set; } = true;

        /// <summary>
        /// Create a text file with infotext next to every generated image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_txt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Save_txt { get; set; }

        /// <summary>
        /// Add model name to infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add_model_name_to_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Add_model_name_to_info { get; set; } = true;

        /// <summary>
        /// Add model hash to infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add_model_hash_to_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Add_model_hash_to_info { get; set; } = true;

        /// <summary>
        /// Add VAE name to infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add_vae_name_to_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Add_vae_name_to_info { get; set; } = true;

        /// <summary>
        /// Add VAE hash to infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add_vae_hash_to_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Add_vae_hash_to_info { get; set; } = true;

        /// <summary>
        /// Add user name to infotext when authenticated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add_user_name_to_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Add_user_name_to_info { get; set; }

        /// <summary>
        /// Add program version to infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add_version_to_infotext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Add_version_to_infotext { get; set; } = true;

        /// <summary>
        /// Disregard checkpoint information from pasted infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_weights_auto_swap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_weights_auto_swap { get; set; } = true;

        /// <summary>
        /// Disregard fields from pasted infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("infotext_skip_pasting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Infotext_skip_pasting { get; set; }

        /// <summary>
        /// Infer styles from prompts of pasted infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("infotext_styles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Infotext_styles { get; set; } = "Apply if any";

        /// <summary>
        /// Show progressbar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_progressbar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Show_progressbar { get; set; } = true;

        /// <summary>
        /// Show live previews of the created image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("live_previews_enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Live_previews_enable { get; set; } = true;

        /// <summary>
        /// Live preview file format
        /// </summary>
        [Newtonsoft.Json.JsonProperty("live_previews_image_format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Live_previews_image_format { get; set; } = "png";

        /// <summary>
        /// Show previews of all images generated in a batch as a grid
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_progress_grid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Show_progress_grid { get; set; } = true;

        /// <summary>
        /// Live preview display period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_progress_every_n_steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Show_progress_every_n_steps { get; set; } = 10D;

        /// <summary>
        /// Live preview method
        /// </summary>
        [Newtonsoft.Json.JsonProperty("show_progress_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Show_progress_type { get; set; } = "Approx NN";

        /// <summary>
        /// Allow Full live preview method with lowvram/medvram
        /// </summary>
        [Newtonsoft.Json.JsonProperty("live_preview_allow_lowvram_full", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Live_preview_allow_lowvram_full { get; set; }

        /// <summary>
        /// Live preview subject
        /// </summary>
        [Newtonsoft.Json.JsonProperty("live_preview_content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Live_preview_content { get; set; } = "Prompt";

        /// <summary>
        /// Progressbar and preview update period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("live_preview_refresh_period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Live_preview_refresh_period { get; set; } = 1000D;

        /// <summary>
        /// Return image with chosen live preview method on interrupt
        /// </summary>
        [Newtonsoft.Json.JsonProperty("live_preview_fast_interrupt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Live_preview_fast_interrupt { get; set; }

        /// <summary>
        /// Show Live preview in full page image viewer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("js_live_preview_in_modal_lightbox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Js_live_preview_in_modal_lightbox { get; set; }

        /// <summary>
        /// Hide samplers in user interface
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hide_samplers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Hide_samplers { get; set; }

        /// <summary>
        /// Eta for DDIM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eta_ddim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Eta_ddim { get; set; }

        /// <summary>
        /// Eta for k-diffusion samplers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eta_ancestral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Eta_ancestral { get; set; } = 1D;

        /// <summary>
        /// img2img DDIM discretize
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ddim_discretize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ddim_discretize { get; set; } = "uniform";

        /// <summary>
        /// sigma churn
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s_churn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object S_churn { get; set; }

        /// <summary>
        /// sigma tmin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s_tmin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object S_tmin { get; set; }

        /// <summary>
        /// sigma tmax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s_tmax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object S_tmax { get; set; }

        /// <summary>
        /// sigma noise
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s_noise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_noise { get; set; } = 1D;

        /// <summary>
        /// Scheduler type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("k_sched_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K_sched_type { get; set; } = "Automatic";

        /// <summary>
        /// sigma min
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sigma_min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sigma_min { get; set; }

        /// <summary>
        /// sigma max
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sigma_max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sigma_max { get; set; }

        /// <summary>
        /// rho
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rho", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Rho { get; set; }

        /// <summary>
        /// Eta noise seed delta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eta_noise_seed_delta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Eta_noise_seed_delta { get; set; }

        /// <summary>
        /// Always discard next-to-last sigma
        /// </summary>
        [Newtonsoft.Json.JsonProperty("always_discard_next_to_last_sigma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Always_discard_next_to_last_sigma { get; set; }

        /// <summary>
        /// SGM noise multiplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sgm_noise_multiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sgm_noise_multiplier { get; set; }

        /// <summary>
        /// UniPC variant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uni_pc_variant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uni_pc_variant { get; set; } = "bh1";

        /// <summary>
        /// UniPC skip type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uni_pc_skip_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uni_pc_skip_type { get; set; } = "time_uniform";

        /// <summary>
        /// UniPC order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uni_pc_order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Uni_pc_order { get; set; } = 3D;

        /// <summary>
        /// UniPC lower order final
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uni_pc_lower_order_final", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Uni_pc_lower_order_final { get; set; } = true;

        /// <summary>
        /// Enable postprocessing operations in txt2img and img2img tabs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postprocessing_enable_in_main_ui", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Postprocessing_enable_in_main_ui { get; set; }

        /// <summary>
        /// Postprocessing operation order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postprocessing_operation_order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Postprocessing_operation_order { get; set; }

        /// <summary>
        /// Maximum number of images in upscaling cache
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upscaling_max_images_in_cache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Upscaling_max_images_in_cache { get; set; } = 5D;

        /// <summary>
        /// Action for existing captions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postprocessing_existing_caption_action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postprocessing_existing_caption_action { get; set; } = "Ignore";

        /// <summary>
        /// Disable these extensions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled_extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Disabled_extensions { get; set; }

        /// <summary>
        /// Disable all extensions (preserves the list of disabled extensions)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_all_extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Disable_all_extensions { get; set; } = "none";

        /// <summary>
        /// Config state file to restore from, under 'config-states/' folder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restore_config_state_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Restore_config_state_file { get; set; }

        /// <summary>
        /// SHA256 hash of the current checkpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_checkpoint_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sd_checkpoint_hash { get; set; }

        /// <summary>
        /// Add network to prompt
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sd_lora", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sd_lora { get; set; } = "None";

        /// <summary>
        /// When adding to prompt, refer to Lora by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lora_preferred_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lora_preferred_name { get; set; } = "Alias from file";

        /// <summary>
        /// Add Lora hashes to infotext
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lora_add_hashes_to_infotext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Lora_add_hashes_to_infotext { get; set; } = true;

        /// <summary>
        /// Always show all networks on the Lora page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lora_show_all", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Lora_show_all { get; set; }

        /// <summary>
        /// Hide networks of unknown versions for model versions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lora_hide_unknown_for_versions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Lora_hide_unknown_for_versions { get; set; }

        /// <summary>
        /// Number of Lora networks to keep cached in memory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lora_in_memory_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Lora_in_memory_limit { get; set; }

        /// <summary>
        /// Lora/Networks: use old method that takes longer when you have multiple Loras active and produces same results as kohya-ss/sd-webui-additional-networks extension
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lora_functional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Lora_functional { get; set; }

        /// <summary>
        /// Zoom canvas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_hotkey_zoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Canvas_hotkey_zoom { get; set; } = "Alt";

        /// <summary>
        /// Adjust brush size
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_hotkey_adjust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Canvas_hotkey_adjust { get; set; } = "Ctrl";

        /// <summary>
        /// Moving the canvas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_hotkey_move", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Canvas_hotkey_move { get; set; } = "F";

        /// <summary>
        /// Fullscreen Mode, maximizes the picture so that it fits into the screen and stretches it to its full width 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_hotkey_fullscreen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Canvas_hotkey_fullscreen { get; set; } = "S";

        /// <summary>
        /// Reset zoom and canvas positon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_hotkey_reset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Canvas_hotkey_reset { get; set; } = "R";

        /// <summary>
        /// Toggle overlap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_hotkey_overlap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Canvas_hotkey_overlap { get; set; } = "O";

        /// <summary>
        /// Enable tooltip on the canvas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_show_tooltip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Canvas_show_tooltip { get; set; } = true;

        /// <summary>
        /// Automatically expands an image that does not fit completely in the canvas area, similar to manually pressing the S and R buttons
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_auto_expand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Canvas_auto_expand { get; set; } = true;

        /// <summary>
        /// Take the focus off the prompt when working with a canvas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_blur_prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Canvas_blur_prompt { get; set; }

        /// <summary>
        /// Disable function that you don't use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canvas_disabled_functions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Canvas_disabled_functions { get; set; }

        [Newtonsoft.Json.JsonProperty("settings_in_ui", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settings_in_ui { get; set; } = "This page allows you to add some settings to the main interface of txt2img and img2img tabs.";

        /// <summary>
        /// Settings for txt2img
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_options_txt2img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extra_options_txt2img { get; set; }

        /// <summary>
        /// Settings for img2img
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_options_img2img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extra_options_img2img { get; set; }

        /// <summary>
        /// Number of columns for added settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_options_cols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Extra_options_cols { get; set; } = 1D;

        /// <summary>
        /// Place added settings into an accordion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra_options_accordion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extra_options_accordion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PNGInfoRequest
    {
        /// <summary>
        /// The base64 encoded PNG image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Image { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PNGInfoResponse
    {
        /// <summary>
        /// A string with the parameters used to generate the image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Info { get; set; }

        /// <summary>
        /// A dictionary containing all the other fields the image had
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Items { get; set; } = new object();

        /// <summary>
        /// A dictionary with parsed generation info fields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Parameters { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProgressResponse
    {
        /// <summary>
        /// The progress with a range of 0 to 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.Always)]
        public double Progress { get; set; }

        [Newtonsoft.Json.JsonProperty("eta_relative", Required = Newtonsoft.Json.Required.Always)]
        public double Eta_relative { get; set; }

        /// <summary>
        /// The current state snapshot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = new object();

        /// <summary>
        /// The current image in base64 format. opts.show_progress_every_n_steps is required for this to work.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("current_image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Current_image { get; set; }

        /// <summary>
        /// Info text used by WebUI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textinfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Textinfo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromptStyleItem
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prompt { get; set; }

        [Newtonsoft.Json.JsonProperty("negative_prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Negative_prompt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RealesrganItem
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scale { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SDModelItem
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("model_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Model_name { get; set; }

        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }

        [Newtonsoft.Json.JsonProperty("sha256", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha256 { get; set; }

        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Filename { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Config { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SDVaeItem
    {
        [Newtonsoft.Json.JsonProperty("model_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Model_name { get; set; }

        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Filename { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SamplerItem
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("aliases", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Aliases { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Options { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScriptArg
    {
        /// <summary>
        /// Name of the argument in UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Default value of the argument
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>
        /// Minimum allowed value for the argumentin UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Minimum { get; set; }

        /// <summary>
        /// Maximum allowed value for the argumentin UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Maximum { get; set; }

        /// <summary>
        /// Step for changing value of the argumentin UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("step", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Step { get; set; }

        /// <summary>
        /// Possible values for the argument
        /// </summary>
        [Newtonsoft.Json.JsonProperty("choices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Choices { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScriptInfo
    {
        /// <summary>
        /// Script name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Flag specifying whether this script is an alwayson script
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_alwayson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_alwayson { get; set; }

        /// <summary>
        /// Flag specifying whether this script is an img2img script
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_img2img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_img2img { get; set; }

        /// <summary>
        /// List of script's arguments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ScriptArg> Args { get; set; } = new System.Collections.ObjectModel.Collection<ScriptArg>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScriptsList
    {
        /// <summary>
        /// Titles of scripts (txt2img)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("txt2img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Txt2img { get; set; }

        /// <summary>
        /// Titles of scripts (img2img)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Img2img { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StableDiffusionProcessingImg2Img
    {
        [Newtonsoft.Json.JsonProperty("prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prompt { get; set; } = "";

        [Newtonsoft.Json.JsonProperty("negative_prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Negative_prompt { get; set; } = "";

        [Newtonsoft.Json.JsonProperty("styles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Styles { get; set; }

        [Newtonsoft.Json.JsonProperty("seed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seed { get; set; } = -1;

        [Newtonsoft.Json.JsonProperty("subseed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Subseed { get; set; } = -1;

        [Newtonsoft.Json.JsonProperty("subseed_strength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Subseed_strength { get; set; } = 0D;

        [Newtonsoft.Json.JsonProperty("seed_resize_from_h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seed_resize_from_h { get; set; } = -1;

        [Newtonsoft.Json.JsonProperty("seed_resize_from_w", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seed_resize_from_w { get; set; } = -1;

        [Newtonsoft.Json.JsonProperty("sampler_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sampler_name { get; set; }

        [Newtonsoft.Json.JsonProperty("batch_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Batch_size { get; set; } = 1;

        [Newtonsoft.Json.JsonProperty("n_iter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? N_iter { get; set; } = 1;

        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Steps { get; set; } = 50;

        [Newtonsoft.Json.JsonProperty("cfg_scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cfg_scale { get; set; } = 7D;

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; } = 512;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; } = 512;

        [Newtonsoft.Json.JsonProperty("restore_faces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restore_faces { get; set; }

        [Newtonsoft.Json.JsonProperty("tiling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tiling { get; set; }

        [Newtonsoft.Json.JsonProperty("do_not_save_samples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Do_not_save_samples { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("do_not_save_grid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Do_not_save_grid { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("eta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Eta { get; set; }

        [Newtonsoft.Json.JsonProperty("denoising_strength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Denoising_strength { get; set; } = 0.75D;

        [Newtonsoft.Json.JsonProperty("s_min_uncond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_min_uncond { get; set; }

        [Newtonsoft.Json.JsonProperty("s_churn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_churn { get; set; }

        [Newtonsoft.Json.JsonProperty("s_tmax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_tmax { get; set; }

        [Newtonsoft.Json.JsonProperty("s_tmin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_tmin { get; set; }

        [Newtonsoft.Json.JsonProperty("s_noise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_noise { get; set; }

        [Newtonsoft.Json.JsonProperty("override_settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Override_settings { get; set; }

        [Newtonsoft.Json.JsonProperty("override_settings_restore_afterwards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Override_settings_restore_afterwards { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("refiner_checkpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refiner_checkpoint { get; set; }

        [Newtonsoft.Json.JsonProperty("refiner_switch_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Refiner_switch_at { get; set; }

        [Newtonsoft.Json.JsonProperty("disable_extra_networks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_extra_networks { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("init_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Init_images { get; set; }

        [Newtonsoft.Json.JsonProperty("resize_mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resize_mode { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("image_cfg_scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Image_cfg_scale { get; set; }

        [Newtonsoft.Json.JsonProperty("mask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mask { get; set; }

        [Newtonsoft.Json.JsonProperty("mask_blur_x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Mask_blur_x { get; set; } = 4;

        [Newtonsoft.Json.JsonProperty("mask_blur_y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Mask_blur_y { get; set; } = 4;

        [Newtonsoft.Json.JsonProperty("mask_blur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Mask_blur { get; set; }

        [Newtonsoft.Json.JsonProperty("inpainting_fill", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inpainting_fill { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("inpaint_full_res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inpaint_full_res { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("inpaint_full_res_padding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inpaint_full_res_padding { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("inpainting_mask_invert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inpainting_mask_invert { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("initial_noise_multiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Initial_noise_multiplier { get; set; }

        [Newtonsoft.Json.JsonProperty("latent_mask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latent_mask { get; set; }

        [Newtonsoft.Json.JsonProperty("sampler_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sampler_index { get; set; } = "Euler";

        [Newtonsoft.Json.JsonProperty("include_init_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Include_init_images { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("script_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Script_name { get; set; }

        [Newtonsoft.Json.JsonProperty("script_args", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Script_args { get; set; }

        [Newtonsoft.Json.JsonProperty("send_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Send_images { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("save_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Save_images { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("alwayson_scripts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Alwayson_scripts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StableDiffusionProcessingTxt2Img
    {
        [Newtonsoft.Json.JsonProperty("prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prompt { get; set; } = "";

        [Newtonsoft.Json.JsonProperty("negative_prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Negative_prompt { get; set; } = "";

        [Newtonsoft.Json.JsonProperty("styles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Styles { get; set; }

        [Newtonsoft.Json.JsonProperty("seed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seed { get; set; } = -1;

        [Newtonsoft.Json.JsonProperty("subseed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Subseed { get; set; } = -1;

        [Newtonsoft.Json.JsonProperty("subseed_strength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Subseed_strength { get; set; } = 0D;

        [Newtonsoft.Json.JsonProperty("seed_resize_from_h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seed_resize_from_h { get; set; } = -1;

        [Newtonsoft.Json.JsonProperty("seed_resize_from_w", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seed_resize_from_w { get; set; } = -1;

        [Newtonsoft.Json.JsonProperty("sampler_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sampler_name { get; set; }

        [Newtonsoft.Json.JsonProperty("batch_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Batch_size { get; set; } = 1;

        [Newtonsoft.Json.JsonProperty("n_iter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? N_iter { get; set; } = 1;

        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Steps { get; set; } = 50;

        [Newtonsoft.Json.JsonProperty("cfg_scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cfg_scale { get; set; } = 7D;

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; } = 512;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; } = 512;

        [Newtonsoft.Json.JsonProperty("restore_faces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restore_faces { get; set; }

        [Newtonsoft.Json.JsonProperty("tiling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tiling { get; set; }

        [Newtonsoft.Json.JsonProperty("do_not_save_samples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Do_not_save_samples { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("do_not_save_grid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Do_not_save_grid { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("eta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Eta { get; set; }

        [Newtonsoft.Json.JsonProperty("denoising_strength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Denoising_strength { get; set; }

        [Newtonsoft.Json.JsonProperty("s_min_uncond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_min_uncond { get; set; }

        [Newtonsoft.Json.JsonProperty("s_churn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_churn { get; set; }

        [Newtonsoft.Json.JsonProperty("s_tmax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_tmax { get; set; }

        [Newtonsoft.Json.JsonProperty("s_tmin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_tmin { get; set; }

        [Newtonsoft.Json.JsonProperty("s_noise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_noise { get; set; }

        [Newtonsoft.Json.JsonProperty("override_settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Override_settings { get; set; }

        [Newtonsoft.Json.JsonProperty("override_settings_restore_afterwards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Override_settings_restore_afterwards { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("refiner_checkpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refiner_checkpoint { get; set; }

        [Newtonsoft.Json.JsonProperty("refiner_switch_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Refiner_switch_at { get; set; }

        [Newtonsoft.Json.JsonProperty("disable_extra_networks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disable_extra_networks { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("enable_hr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable_hr { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("firstphase_width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Firstphase_width { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("firstphase_height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Firstphase_height { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("hr_scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Hr_scale { get; set; } = 2D;

        [Newtonsoft.Json.JsonProperty("hr_upscaler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hr_upscaler { get; set; }

        [Newtonsoft.Json.JsonProperty("hr_second_pass_steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hr_second_pass_steps { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("hr_resize_x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hr_resize_x { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("hr_resize_y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hr_resize_y { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("hr_checkpoint_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hr_checkpoint_name { get; set; }

        [Newtonsoft.Json.JsonProperty("hr_sampler_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hr_sampler_name { get; set; }

        [Newtonsoft.Json.JsonProperty("hr_prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hr_prompt { get; set; } = "";

        [Newtonsoft.Json.JsonProperty("hr_negative_prompt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hr_negative_prompt { get; set; } = "";

        [Newtonsoft.Json.JsonProperty("sampler_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sampler_index { get; set; } = "Euler";

        [Newtonsoft.Json.JsonProperty("script_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Script_name { get; set; }

        [Newtonsoft.Json.JsonProperty("script_args", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Script_args { get; set; }

        [Newtonsoft.Json.JsonProperty("send_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Send_images { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("save_images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Save_images { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("alwayson_scripts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Alwayson_scripts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TextToImageResponse
    {
        /// <summary>
        /// The generated image in base64 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Images { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Parameters { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Info { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrainResponse
    {
        /// <summary>
        /// Response string from train embedding or hypernetwork task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Info { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpscalerItem
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("model_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model_name { get; set; }

        [Newtonsoft.Json.JsonProperty("model_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model_path { get; set; }

        [Newtonsoft.Json.JsonProperty("model_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model_url { get; set; }

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Scale { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationError
    {
        [Newtonsoft.Json.JsonProperty("loc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Loc> Loc { get; set; } = new System.Collections.ObjectModel.Collection<Loc>();

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExtrasBatchImagesRequestResize_mode
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExtrasSingleImageRequestResize_mode
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Loc
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625